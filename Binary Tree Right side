/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int max_depth=0;
    void find_right_view(TreeNode* root,vector<int>&ans,int k){
        if(root==NULL){
            return;
        }
        if(k==max_depth){
            ans.push_back(root->val);
            max_depth++;
        }
        find_right_view(root->right,ans,k+1);
        find_right_view(root->left,ans,k+1);
        
    }
    vector<int> rightSideView(TreeNode* root) {
        if(root==NULL){
            return {};
        }
        vector<int>ans;
        int k=0;
        find_right_view(root,ans,k);
                // queue<TreeNode*>q;
        // vector<int>ans;
        // q.push(root);
        // while(q.size()>0){
        //     int len=q.size();
        //     for(int i=0;i<len;i++){
        //         TreeNode* node=q.front();
        //         q.pop();
        //         if(i==len-1){
        //             ans.push_back(node->val);
        //         }
        //         if(node->left){
        //             q.push(node->left);
        //         }
        //         if(node->right){
        //             q.push(node->right);
        //         }
        //     }
        // }


        return ans;
    }
};
