/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* deletNode(TreeNode* root,unordered_map<int,int>umap,vector<TreeNode*>&ans){
         if(root==NULL){
            return NULL;
         }
         root->left=deletNode(root->left,umap,ans);
         root->right=deletNode(root->right,umap,ans);
         if(umap.find(root->val)!=umap.end()){
              if(root->left){
                ans.push_back(root->left);
              }
              if(root->right){
                ans.push_back(root->right);
              }
              return NULL;
         }else{
            return root;
         }
    }
    vector<TreeNode*> delNodes(TreeNode* root, vector<int>& to_delete) {
        vector<TreeNode*>ans;
        unordered_map<int,int>umap;
        for(int i=0;i<to_delete.size();i++){
            umap[to_delete[i]]++;
        }
        deletNode(root,umap,ans);
        if(umap.find(root->val)==umap.end()){
            ans.push_back(root);
        }
        return ans;
    }
};
