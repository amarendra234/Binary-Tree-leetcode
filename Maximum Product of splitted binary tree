/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
   int sum;
    int find_total_sum(TreeNode* root){
        if(root==NULL){
            return 0;
        }
        return root->val+find_total_sum(root->left)+find_total_sum(root->right);
    }
    long long  find_all_possible_subtree_sum(TreeNode* root,long long  &maxi){
        if(root==NULL){
            return 0;
        }
        long long left_sum=find_all_possible_subtree_sum(root->left,maxi);
        long long right_sum=find_all_possible_subtree_sum(root->right,maxi);
        long long total_sub_tree_sum=left_sum+right_sum+root->val;
        long long sum2=sum-total_sub_tree_sum;
        long long product=total_sub_tree_sum*sum2;
        maxi=max(maxi,product);
        return total_sub_tree_sum;
    }
    int maxProduct(TreeNode* root) {
        sum=find_total_sum(root);
        long long int maxi_p=0;
        find_all_possible_subtree_sum(root,maxi_p);
        return maxi_p%1000000007;
    }
};
