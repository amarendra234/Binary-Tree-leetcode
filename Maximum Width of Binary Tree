/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
 
  class Pair{
    TreeNode node;
    int value;
    Pair(TreeNode node,int value){
        this.node=node;
        this.value=value;
    }
 }
class Solution {
    public int widthOfBinaryTree(TreeNode root) {
        Deque<Pair>deque=new LinkedList<>();
        deque.add(new Pair(root,0));
        int maxi=Integer.MIN_VALUE;
        while(deque.size()>0){
            int len=deque.size();
            int l=deque.peekFirst().value;
            int r=deque.peekLast().value;
            maxi=Math.max(maxi,r-l+1);
            for(int i=0;i<len;i++){
                TreeNode nodee=deque.peekFirst().node;
                int val=deque.peekFirst().value;
                deque.removeFirst();
                if(nodee.left!=null){
                    deque.add(new Pair(nodee.left,2*val+1));
                }
                if(nodee.right!=null){
                    deque.add(new Pair(nodee.right,2*val+2));
                }
            }
        }
        return maxi;

    }
}
