/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int minSwaps(vector<int> &arr)
  {
	vector<int>sortedArray=arr;
	sort(sortedArray.begin(),sortedArray.end());
	unordered_map<int,int>umap;
	for(int i=0;i<arr.size();i++){
		umap[arr[i]]=i;
	}
	int count=0;
	for(int i=0;i<arr.size();i++){
		if(arr[i]!=sortedArray[i]){
			int curr_val=arr[i];
			int curr_index=i;
			int required_val=sortedArray[i];
			int req_index=umap[required_val];
			swap(arr[curr_index],arr[req_index]);
			umap[curr_val]=req_index;
			umap[required_val]=curr_index;
			count++;
		}
	}
	return count;
}
    int minimumOperations(TreeNode* root) {
        int ans=0;
        if(root==NULL){
            return 0;
        }
        queue<TreeNode*>q;
        q.push(root);
        while(q.size()>0){
            int len=q.size();
            vector<int>temp;
            for(int i=0;i<len;i++){
                TreeNode* node=q.front();
                q.pop();
                temp.push_back(node->val);
                if(node->left){
                    q.push(node->left);
                }
                if(node->right){
                    q.push(node->right);
                }
            }
            ans+=minSwaps(temp);

        }

        return ans;
    }
};
