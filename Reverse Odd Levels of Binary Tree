/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* reverseOddLevels(TreeNode* root) {
        TreeNode* temp=root;
         if(root==NULL){
            return root;
         }
         int level=0;
         queue<TreeNode*>q;
         q.push(temp);
         while(q.size()>0){
            int len=q.size();
            vector<TreeNode*>v;
            for(int i=0;i<len;i++){
                TreeNode* node=q.front();
                q.pop();
                if(level%2!=0){
                    v.push_back(node);
                }
                if(node->left){
                    q.push(node->left);
                }
                if(node->right){
                    q.push(node->right);
                }
            }
            if(v.size()!=0){
                int l=0;
                int r=v.size()-1;
                while(l<r){
                    int temp=v[l]->val;
                    v[l]->val=v[r]->val;
                    v[r]->val=temp;
                    l++,r--;
                }
            }
            level++;
         }

        return root;
    }
};
